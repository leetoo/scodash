# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="%APPLICATION_SECRET%"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

jdbc-journal {
  slick = ${slick}
  slick.db.numThreads = 1
  slick.db.maxConnections = 1
  slick.db.minConnections = 1
  slick.db.connectionTimeout = 1800000 // 30 minutes

  recovery-event-timeout = 60m

  event-adapters {
    tag-adapter = "controllers.TaggingAdapter"
  }

  event-adapter-bindings {
    "controllers.EntityEvent"            = tag-adapter
  }

}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  slick = ${slick}
  slick.db.numThreads = 1
  slick.db.maxConnections = 1
  slick.db.minConnections = 1
  slick.db.connectionTimeout = 1800000 // 30 minutes
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  refresh-interval = "10ms"

  max-buffer-size = "500"

  slick = ${slick}
  slick.db.numThreads = 1
  slick.db.maxConnections = 1
  slick.db.minConnections = 1
  slick.db.connectionTimeout = 1800000 // 30 minutes
}

slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    host = ${SLICK_DB_HOST}
    url = ${SLICK_DB_URL}
    user = ${SLICK_DB_USER}
    password = ${SLICK_DB_PASSWORD}
    driver = "org.postgresql.Driver"
    connectionTestQuery = "SELECT 1" // postgres doesnt support connection timeout
  }
}

akka {
  loglevel = "DEBUG"
  persistence {
    journal.plugin = "jdbc-journal"
    snapshot-store.plugin = "jdbc-snapshot-store"
  }
  actor{
    serializers{
      json = "controllers.JsonSerializer"
    }
    serialization-bindings {
      "controllers.EntityFieldsObject" = json
    }
  }
}

persistent-entity-timeout = "60s"

persistence {
  journal.plugin = "jdbc-journal"
  snapshot-store.plugin = "jdbc-snapshot-store"
}

elasticsearch{
  protocol = ${ELASTIC_PROTO  COL}
  host = ${ELASTIC_HOST}
  port = ${ELASTIC_PORT}
  username = ${ELASTIC_USERNAME}
  password = ${ELASTIC_PASSWORD}
}

email {
  base.url = ${EMAIL_BASE_URL}
  sendgrid.api.key = ${SENDGRID_API_KEY}
}

play.filters.disabled+=play.filters.csrf.CSRFFilter
play.filters.disabled+=play.filters.headers.SecurityHeadersFilter

play.filters.hosts {
  # Allow requests to example.com, its subdomains, and localhost:9000.
  allowed = [".scodash.herokuapp.com", ".scodash.com", "localhost:9000"]
}